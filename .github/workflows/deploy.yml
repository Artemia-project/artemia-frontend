name: Deploy

on:
  push:
    branches:
      - main
      - develop
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  APP_NAME: artemia-frontend

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    
    outputs:
      image-name: ${{ steps.meta.outputs.image-name }}
      environment: ${{ steps.environment.outputs.env }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine environment
        id: environment
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "env=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "env=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            echo "env=staging" >> $GITHUB_OUTPUT
          else
            echo "env=development" >> $GITHUB_OUTPUT
          fi

      - name: Generate image metadata
        id: meta
        run: |
          IMAGE_NAME="${{ env.APP_NAME }}-${{ steps.environment.outputs.env }}"
          echo "image-name=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3


      - name: Build Docker image
        id: build
        run: |
          docker build \
            --build-arg DEPLOYMENT_ENV=${{ steps.environment.outputs.env }} \
            --tag ${{ steps.meta.outputs.image-name }}:latest \
            --tag ${{ steps.meta.outputs.image-name }}:${{ github.sha }} \
            .

      - name: Save Docker image
        run: |
          docker save ${{ steps.meta.outputs.image-name }}:latest | gzip > docker-image.tar.gz
          ls -lh docker-image.tar.gz > /dev/null 2>&1

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ steps.environment.outputs.env }}
          path: docker-image.tar.gz
          retention-days: 1

  deploy-development:
    name: Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    if: contains(github.ref, 'develop') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development
    
    steps:
      - name: Checkout code (for actions)
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ needs.build.outputs.environment }}
          path: .

      - name: Deploy to VM
        uses: ./.github/actions/deploy-to-vm
        with:
          vm-host: ${{ secrets.VM_HOST }}
          vm-username: ${{ secrets.VM_USERNAME }}
          vm-private-key: ${{ secrets.VM_PRIVATE_KEY }}
          image-name: ${{ needs.build.outputs.image-name }}
          container-name: ${{ env.APP_NAME }}-dev
          port: 3001
          environment: development
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}

  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: contains(github.ref, 'staging') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: Checkout code (for actions)
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ needs.build.outputs.environment }}
          path: .

      - name: Deploy to VM
        uses: ./.github/actions/deploy-to-vm
        with:
          vm-host: ${{ secrets.VM_HOST }}
          vm-username: ${{ secrets.VM_USERNAME }}
          vm-private-key: ${{ secrets.VM_PRIVATE_KEY }}
          image-name: ${{ needs.build.outputs.image-name }}
          container-name: ${{ env.APP_NAME }}-staging
          port: 3002
          environment: staging
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}

  deploy-production:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
      - name: Checkout code (for actions)
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ needs.build.outputs.environment }}
          path: .

      - name: Deploy to VM
        uses: ./.github/actions/deploy-to-vm
        with:
          vm-host: ${{ secrets.VM_HOST }}
          vm-username: ${{ secrets.VM_USERNAME }}
          vm-private-key: ${{ secrets.VM_PRIVATE_KEY }}
          image-name: ${{ needs.build.outputs.image-name }}
          container-name: ${{ env.APP_NAME }}-prod
          port: 3000
          environment: production
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}

  notify:
    name: Notify Deployment Status
    needs: [build, deploy-development, deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Determine deployment results
        id: results
        run: |
          if [ "${{ needs.build.result }}" == "success" ] && \
             ([ "${{ needs.deploy-development.result }}" == "success" ] || [ "${{ needs.deploy-development.result }}" == "skipped" ]) && \
             ([ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-staging.result }}" == "skipped" ]) && \
             ([ "${{ needs.deploy-production.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "skipped" ]); then
            echo "status=SUCCESS" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          else
            echo "status=FAILED" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          fi

      - name: Send Teams notification
        run: |
          STATUS_EMOJI="${{ steps.results.outputs.status == 'SUCCESS' && '✅' || '❌' }}"
          STATUS_COLOR="${{ steps.results.outputs.status == 'SUCCESS' && 'Good' || 'Attention' }}"
          
          curl -X POST "${{ secrets.TEAMS_WEBHOOK_URL }}"