import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { MarkdownRenderer } from '@/components/MarkdownRenderer';
import { X, Copy, Share2, ChevronDown, ChevronUp, Heart } from 'lucide-react';
import { isLongMessage, getMessagePreview } from '@/utils/text';
import { useMessageSharing } from '@/hooks/useMessageSharing';
import { Message } from '@/types';

interface SavedMessagesModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  savedMessages: Message[];\n}\n\nexport const SavedMessagesModal: React.FC<SavedMessagesModalProps> = ({\n  isOpen,\n  onClose,\n  savedMessages\n}) => {\n  const [expandedMessages, setExpandedMessages] = useState<Set<string>>(new Set());\n  const {\n    handleShareMessage,\n    handleCopyMessage,\n    handleShareAllMessages,\n    handleCopyAllMessages,\n  } = useMessageSharing();\n\n  const toggleMessageExpansion = (messageId: string) => {\n    setExpandedMessages(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(messageId)) {\n        newSet.delete(messageId);\n      } else {\n        newSet.add(messageId);\n      }\n      return newSet;\n    });\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-background/80 backdrop-blur-sm z-50\">\n      <div className=\"w-full h-full bg-background overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 md:p-6 border-b\">\n          <div className=\"text-center flex-1\">\n            <h2 className=\"text-xl md:text-2xl font-medium text-left\">저장된 메시지</h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-muted-foreground hover:text-foreground transition-colors p-1 ml-4\"\n          >\n            <X className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        {/* Messages content */}\n        <div className=\"p-4 md:p-6 overflow-y-auto\" style={{height: 'calc(100vh - 160px)'}}>\n          <div className=\"space-y-4 max-w-4xl mx-auto\">\n            {savedMessages.length > 0 ? (\n              savedMessages.map((msg) => {\n                const isExpanded = expandedMessages.has(msg.id);\n                const isLong = isLongMessage(msg.content);\n                const contentToShow = isLong && !isExpanded \n                  ? getMessagePreview(msg.content) \n                  : msg.content;\n                \n                return (\n                  <div\n                    key={msg.id}\n                    className={`border rounded-xl bg-white shadow-md hover:shadow-lg transition-all duration-300 ${\n                      isLong && !isExpanded \n                        ? 'p-3 md:p-4' \n                        : 'p-4 md:p-6'\n                    }`}\n                  >\n                    <div className={isLong && !isExpanded ? \"relative\" : \"\"}>\n                      <MarkdownRenderer\n                        content={contentToShow}\n                        className={isLong && !isExpanded ? \"text-xs md:text-sm\" : \"text-sm md:text-base\"}\n                      />\n                      {isLong && !isExpanded && (\n                        <div className=\"absolute bottom-0 left-0 right-0 h-6 bg-gradient-to-t from-white to-transparent pointer-events-none\" />\n                      )}\n                    </div>\n                    \n                    {isLong && (\n                      <div className=\"mt-3 flex justify-center\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => toggleMessageExpansion(msg.id)}\n                          className=\"text-xs hover:bg-gray-100 px-3 py-1 rounded-full border border-gray-200 hover:border-gray-300\"\n                        >\n                          {isExpanded ? (\n                            <>\n                              <ChevronUp className=\"w-3 h-3 mr-1\" />\n                              접기\n                            </>\n                          ) : (\n                            <>\n                              <ChevronDown className=\"w-3 h-3 mr-1\" />\n                              더보기\n                            </>\n                          )}\n                        </Button>\n                      </div>\n                    )}\n                    \n                    <div className=\"mt-4 flex items-center justify-between text-xs md:text-sm text-muted-foreground border-t pt-3\">\n                      <span>{new Date(msg.timestamp).toLocaleString('ko-KR')}</span>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleCopyMessage(msg)}\n                          className=\"text-xs hover:bg-green-50 hover:text-green-600\"\n                        >\n                          <Copy className=\"w-3 h-3 mr-1\" />\n                          복사\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleShareMessage(msg)}\n                          className=\"text-xs hover:bg-blue-50 hover:text-blue-600\"\n                        >\n                          <Share2 className=\"w-3 h-3 mr-1\" />\n                          공유\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })\n            ) : (\n              <div className=\"text-center py-12\">\n                <Heart className=\"w-16 h-16 mx-auto text-muted-foreground/20 mb-4\" />\n                <p className=\"text-muted-foreground text-lg mb-2\">\n                  저장된 메시지가 없습니다\n                </p>\n                <p className=\"text-muted-foreground/60 text-sm\">\n                  AI 응답에서 ❤️ 버튼을 눌러 메시지를 저장해보세요\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Footer */}\n        {savedMessages.length > 0 && (\n          <div className=\"border-t p-4 md:p-6\">\n            <div className=\"flex flex-col md:flex-row gap-2 justify-center max-w-4xl mx-auto\">\n              <Button\n                variant=\"outline\"\n                onClick={() => handleCopyAllMessages(savedMessages)}\n                className=\"flex-1 md:flex-none hover:bg-green-50 hover:text-green-600 hover:border-green-300\"\n              >\n                <Copy className=\"w-4 h-4 mr-2\" />\n                전체 복사\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => handleShareAllMessages(savedMessages)}\n                className=\"flex-1 md:flex-none hover:bg-blue-50 hover:text-blue-600 hover:border-blue-300\"\n              >\n                <Share2 className=\"w-4 h-4 mr-2\" />\n                전체 공유\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};